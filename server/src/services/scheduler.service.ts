import footballAPIService from './footballAPI.service';
import footballCacheService from './footballCache.service';

class SchedulerService {
  private intervalId: NodeJS.Timeout | null = null;
  private readonly CHECK_INTERVAL = 12 * 60 * 60 * 1000; // 12 horas (em vez de 30 minutos)

  // Iniciar verifica√ß√£o autom√°tica de novos jogos
  startAutoVotingCheck() {
    console.log('üïê Starting automatic voting check every 12 hours...');
    
    // Verificar imediatamente
    this.checkForNewVotings();
    
    // Configurar verifica√ß√£o peri√≥dica
    this.intervalId = setInterval(async () => {
      await this.checkForNewVotings();
    }, this.CHECK_INTERVAL);
  }

  // Parar verifica√ß√£o autom√°tica
  stopAutoVotingCheck() {
    if (this.intervalId) {
      clearInterval(this.intervalId);
      this.intervalId = null;
      console.log('‚èπÔ∏è Stopped automatic voting check');
    }
  }

  // Verificar se h√° novos jogos para criar vota√ß√µes
  private async checkForNewVotings() {
    try {
      console.log('üîÑ Scheduled check for new Mar√≠timo matches...');
      
      // Verificar se precisa de sincroniza√ß√£o
      const syncStatus = await footballCacheService.needsSync();
      
      if (syncStatus.needsFullSync) {
        console.log('üì• Running full sync...');
        await footballCacheService.fullSync();
      } else if (syncStatus.needsCheckSync) {
        console.log('‚ö° Running quick sync...');
        await footballCacheService.quickSync();
      }
      
      // Verificar se h√° jogos n√£o processados para criar vota√ß√µes
      await this.createVotingFromLatestMatch();
      
    } catch (error) {
      console.error('‚ùå Error in scheduled voting check:', error);
    }
  }

  // Criar vota√ß√£o do √∫ltimo jogo n√£o processado
  private async createVotingFromLatestMatch() {
    try {
      const latestMatch = await footballCacheService.getLatestUnprocessedMatch();
      
      if (latestMatch) {
        console.log(`üÜï Found unprocessed match: ${latestMatch.home_team} vs ${latestMatch.away_team}`);
        
        // Tentar criar vota√ß√£o usando dados do cache
        const result = await footballAPIService.createAutoVotingFromRealMatch();
        
        if (result.success) {
          // Marcar como processado
          await footballCacheService.markMatchAsProcessed(latestMatch.fixture_id);
          console.log('‚úÖ Voting created and match marked as processed');
        }
      } else {
        console.log('‚úÖ No new unprocessed matches found');
      }
    } catch (error) {
      console.error('‚ùå Error creating voting from latest match:', error);
    }
  }

  // Criar vota√ß√£o autom√°tica imediatamente (para testes)
  async createVotingNow() {
    try {
      console.log('‚ö° Manual trigger: Creating voting from latest match...');
      const result = await footballAPIService.createAutoVotingFromRealMatch();
      return result;
    } catch (error) {
      console.error('‚ùå Error in manual voting creation:', error);
      return { success: false, message: 'Erro na cria√ß√£o manual de vota√ß√£o' };
    }
  }
}

export default new SchedulerService(); 